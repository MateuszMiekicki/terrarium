#pragma once
#define PACKAGE_NAME   "@PACKAGE_NAME@" // NOLINT
#define COMPONENT_NAME "@COMPONENT_NAME@" // NOLINT
#define MODULE_NAME    "@MODULE_NAME@" // NOLINT
#define MODULE_VERSION "@PROJECT_VERSION@" // NOLINT
#include <fmt/core.h>
#include <fmt/ostream.h>
#include <iostream>
#include <spdlog/fmt/ostr.h>
#include <spdlog/sinks/basic_file_sink.h>
#include <spdlog/spdlog.h>
#include <spdlog/spdlog.h>
#include <spdlog/sinks/stdout_color_sinks.h>
#include <spdlog/fmt/ostr.h>
#include <fmt/format.h>
namespace toad::@PACKAGE_NAME@::@COMPONENT_NAME@
{
struct Logger // NOLINT
{
std::shared_ptr<spdlog::logger> basicLogger;
~Logger(){}
Logger() noexcept
try : basicLogger{spdlog::basic_logger_mt(
    MODULE_NAME, fmt::format("logs/{}/{}/{}_{}.log", PACKAGE_NAME, COMPONENT_NAME, MODULE_NAME, MODULE_VERSION).data())}
{
    basicLogger->set_pattern("[%Y-%m-%dT%T.%e %z] [%n] [%l] [thread %t] %@: %v");
#ifndef DNDEBUG
    basicLogger->set_level(spdlog::level::trace);
#endif
}
catch(const spdlog::spdlog_ex &ex)
{
    std::cerr << "Log init failed: " << ex.what() << std::endl;
}
catch(const std::exception &e)
{
    std::cerr << "error occurred: " << e.what() << std::endl;
}
catch(...)
{
    std::cerr << "undefined error occurred\n";
}
Logger(const Logger &) = delete; // NOLINT
Logger &operator=(const Logger &) = delete; // NOLINT
};
}
#ifndef DNDEBUG
    #define DEBUG_LOG(...) SPDLOG_LOGGER_CALL(spdlog::get(MODULE_NAME), spdlog::level::debug, __VA_ARGS__) // NOLINT
#else
    #define DEBUG_LOG(...) void() // NOLINT
#endif
#define INFO_LOG(...)     SPDLOG_LOGGER_CALL(spdlog::get(MODULE_NAME), spdlog::level::info, __VA_ARGS__) // NOLINT
#define TRACE_LOG(...)    SPDLOG_LOGGER_CALL(spdlog::get(MODULE_NAME), spdlog::level::trace, __VA_ARGS__) // NOLINT
#define WARN_LOG(...)     SPDLOG_LOGGER_CALL(spdlog::get(MODULE_NAME), spdlog::level::warn, __VA_ARGS__) // NOLINT
#define CRITICAL_LOG(...) SPDLOG_LOGGER_CALL(spdlog::get(MODULE_NAME), spdlog::level::critical, __VA_ARGS__) // NOLINT
#define ERROR_LOG(...)    SPDLOG_LOGGER_CALL(spdlog::get(MODULE_NAME), spdlog::level::error, __VA_ARGS__) // NOLINT